# -*- coding: utf-8 -*-
"""Biotech Drug Discovery demo

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/embedded/projects/cat-looker-core-argolis-demo/locations/us-central1/repositories/c4c55b44-b6af-46a3-ace8-35e4133cf68b
"""

!gcloud auth application-default login

pip install google-cloud-bigquery pandas networkx matplotlib

"""# **BigQuery Biotech Demo: Accelerating Drug Discovery with Vector Search & Graph Analytics**

SCENARIO: A research scientist is working on finding novel treatments for 'Glioblastoma'.

*  They start with a known, moderately effective compound ('DrugEffectiveX') and want to screen a large library of molecules to find a better candidate.

The  "better" candidate is defined by three criteria:
1.  Structural Similarity: The molecule should be structurally similar to the known effective drug.
2.  Disease Relevance: It must interact with biological pathways known to be associated with Glioblastoma.
3.  Safety Profile: It should NOT interact with pathways known to cause adverse side effects (e.g., cardiotoxicity).

WORKFLOW:
1.  Use VECTOR SEARCH to find a list of structurally similar candidate molecules.
2.  Use GRAPH ANALYTICS to analyze these candidates for disease relevance and off-target effects.
3.  Synthesize the results to identify the most promising lead candidate.

**Step 0**: populate `biotech_demo`dataset with: molecules, proteins, pathways, diseases, molecule_protein_interactions, protein_pathway_involvement, pathway_disease_association
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# 
# CREATE SCHEMA IF NOT EXISTS biotech_demo;
# -- Table 1: Molecules (Expanded Library)
# CREATE OR REPLACE TABLE biotech_demo.molecules (
#   molecule_id STRING NOT NULL, molecule_name STRING, smiles_string STRING, embedding ARRAY<FLOAT64>
# );
# 
# -- Table 2: Proteins
# CREATE OR REPLACE TABLE biotech_demo.proteins (
#   protein_id STRING NOT NULL, protein_name STRING
# );
# 
# -- Table 3: Biological Pathways
# CREATE OR REPLACE TABLE biotech_demo.pathways (
#   pathway_id STRING NOT NULL, pathway_name STRING, description STRING
# );
# 
# -- Table 4: Diseases
# CREATE OR REPLACE TABLE biotech_demo.diseases (
#   disease_id STRING NOT NULL, disease_name STRING
# );
# 
# -- Table 5: Molecule-Protein Interactions (Edges)
# CREATE OR REPLACE TABLE biotech_demo.molecule_protein_interactions (
#   molecule_id STRING, protein_id STRING, interaction_type STRING, strength FLOAT64
# );
# 
# -- Table 6: Protein-Pathway Involvement (Edges)
# CREATE OR REPLACE TABLE biotech_demo.protein_pathway_involvement (
#   protein_id STRING, pathway_id STRING
# );
# 
# -- Table 7: Pathway-Disease Association (Edges)
# CREATE OR REPLACE TABLE biotech_demo.pathway_disease_association (
#   pathway_id STRING, disease_id STRING, association_type STRING
# );
# 
# -- Insert Expanded Sample Data
# -- This data is designed to tell a story. 'Candidate-08' will emerge as the winner.
# INSERT INTO biotech_demo.molecules (molecule_id, molecule_name, smiles_string, embedding) VALUES
# ('MOL-001', 'DrugEffectiveX', 'C9H8O4', [0.5, 0.5, 0.5, 0.5, 0.5, 0.5]), -- Target Drug
# ('MOL-002', 'Candidate-02', 'C10H12N2O', [0.51, 0.52, 0.49, 0.5, 0.5, 0.5]), -- Top structural match, but links to TOXIC pathway
# ('MOL-003', 'Candidate-03', 'C8H10N4O2', [0.48, 0.49, 0.53, 0.51, 0.5, 0.5]), -- High similarity, wrong disease pathway
# ('MOL-004', 'Candidate-04', 'C17H21NO4', [0.9, 0.8, 0.9, 0.1, 0.2, 0.1]), -- Low similarity
# ('MOL-005', 'Candidate-05', 'C6H6O2', [0.55, 0.53, 0.48, 0.49, 0.5, 0.5]), -- High similarity, but interacts weakly
# ('MOL-006', 'Candidate-06', 'C12H12O3', [0.2, 0.1, 0.3, 0.8, 0.9, 0.85]),-- Low similarity
# ('MOL-007', 'Candidate-07', 'C11H15NO2', [0.53, 0.54, 0.5, 0.48, 0.49, 0.5]), -- Good similarity, but no disease link
# ('MOL-008', 'Candidate-08', 'C13H18O2', [0.6, 0.6, 0.4, 0.4, 0.5, 0.5]), -- **IDEAL CANDIDATE**: Good-enough similarity, strong on-target, no off-target
# ('MOL-009', 'Candidate-09', 'C15H14O5', [0.45, 0.46, 0.58, 0.57, 0.5, 0.5]);-- Decent similarity, weak on-target
# 
# INSERT INTO biotech_demo.proteins (protein_id, protein_name) VALUES
# ('P01', 'EGFR'), ('P02', 'PI3K'), ('P03', 'mTOR'), ('P04', 'HER2'), ('P05', 'VEGFR'),
# ('P06', 'hERG'), ('P07', 'TP53'), ('P08', 'BRCA1');
# 
# INSERT INTO biotech_demo.pathways (pathway_id, pathway_name, description) VALUES
# ('PATH-01', 'EGFR Signaling', 'Key pathway in many cancers, including Glioblastoma'),
# ('PATH-02', 'PI3K/AKT/mTOR Signaling', 'Crucial for cell growth and survival in Glioblastoma'),
# ('PATH-03', 'Angiogenesis Pathway', 'Promotes blood vessel formation, relevant to tumor growth'),
# ('PATH-04', 'DNA Repair Pathway', 'Involved in DNA damage response'),
# ('PATH-05', 'Cardiotoxicity Pathway', 'Leads to heart-related adverse effects. HIGHLY UNDESIRABLE.');
# 
# INSERT INTO biotech_demo.diseases (disease_id, disease_name) VALUES
# ('D-01', 'Glioblastoma'), ('D-02', 'Breast Cancer');
# 
# INSERT INTO biotech_demo.molecule_protein_interactions (molecule_id, protein_id, interaction_type, strength) VALUES
# ('MOL-002', 'P01', 'inhibitor', 0.9), ('MOL-002', 'P06', 'inhibitor', 0.85), -- Top candidate, but hits toxic hERG
# ('MOL-003', 'P04', 'inhibitor', 0.92), -- Strong, but wrong disease (HER2 for Breast Cancer)
# ('MOL-005', 'P02', 'inhibitor', 0.3),  -- Weak interaction
# ('MOL-008', 'P02', 'inhibitor', 0.95), ('MOL-008', 'P03', 'inhibitor', 0.91), -- Ideal candidate, strong and clean
# ('MOL-009', 'P01', 'inhibitor', 0.4);  -- Weak interaction
# 
# INSERT INTO biotech_demo.protein_pathway_involvement (protein_id, pathway_id) VALUES
# ('P01', 'PATH-01'), ('P02', 'PATH-02'), ('P03', 'PATH-02'), ('P04', 'PATH-01'),
# ('P05', 'PATH-03'), ('P06', 'PATH-05'), ('P07', 'PATH-04'), ('P08', 'PATH-04');
# 
# INSERT INTO biotech_demo.pathway_disease_association (pathway_id, disease_id, association_type) VALUES
# ('PATH-01', 'D-01', 'driver'), ('PATH-01', 'D-02', 'driver'), ('PATH-02', 'D-01', 'driver'),
# ('PATH-03', 'D-01', 'implicated'), ('PATH-04', 'D-02', 'driver');

"""# **Step 1**: Vector search for structural Similarity"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# 
# CREATE OR REPLACE TABLE biotech_demo.similar_molecules AS
# WITH target AS (SELECT embedding FROM biotech_demo.molecules WHERE molecule_id = 'MOL-001')
# SELECT m.molecule_id, m.molecule_name, ML.DISTANCE(m.embedding, (SELECT embedding FROM target), 'COSINE') AS distance
# FROM biotech_demo.molecules m WHERE m.molecule_id != 'MOL-001' ORDER BY distance ASC LIMIT 10;
# 
# -- Review the initial candidates. Note that Candidate-02 is the top hit.
# SELECT * FROM biotech_demo.similar_molecules;

"""turns out 'Candidate-02' is the molecule found to be the most structurally similar to the target drug 'DrugEffectiveX' based on vector search.



*   Vector representation: Each molecule is represented by a numerical vector called an `embedding`, so molecules w similar chemical structures have embeddings that are closer together in mathematical space
*   Distance Calculation: the `ml.distance` function calculate the cosine distance between target druge's embedding and all other molecule embeddings
*   lowest score wins: in cosine distance, lower score = higher similarity
*   Sorting: the `ORDER BY distance asc` sorts results from smallest to largest

The molecule with the shortest distance means it is closest structural match found by the vector search. This will be further refined by graph query later on

# **Step 2**: Create the Full Biological Knowledge Graph
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# 
# CREATE OR REPLACE PROPERTY GRAPH biotech_demo.biological_network
#   NODE TABLES (
#     biotech_demo.molecules
#       KEY (molecule_id)
#       LABEL Molecule
#       PROPERTIES (molecule_id, molecule_name, smiles_string, embedding),
#     biotech_demo.proteins
#       KEY (protein_id)
#       LABEL Protein
#       PROPERTIES (protein_id, protein_name),
#     biotech_demo.pathways
#       KEY (pathway_id)
#       LABEL Pathway
#       PROPERTIES (pathway_id, pathway_name, description),
#     biotech_demo.diseases
#       KEY (disease_id)
#       LABEL Disease
#       PROPERTIES (disease_id, disease_name)
#   )
#   EDGE TABLES (
#     biotech_demo.molecule_protein_interactions
#       KEY (molecule_id, protein_id)
#       SOURCE KEY (molecule_id) REFERENCES molecules
#       DESTINATION KEY (protein_id) REFERENCES proteins
#       LABEL interacts_with
#       PROPERTIES(molecule_id, protein_id, interaction_type, strength),
#     biotech_demo.protein_pathway_involvement
#       KEY (protein_id, pathway_id)
#       SOURCE KEY (protein_id) REFERENCES proteins
#       DESTINATION KEY (pathway_id) REFERENCES pathways
#       LABEL is_involved_in,
#     biotech_demo.pathway_disease_association
#       KEY (pathway_id, disease_id)
#       SOURCE KEY (pathway_id) REFERENCES pathways
#       DESTINATION KEY (disease_id) REFERENCES diseases
#       LABEL is_associated_with
#   );

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --graph
# ## charting the biological network
# GRAPH biotech_demo.biological_network
# MATCH
#   (molecules: Molecule)-[interacts_with:interacts_with]->(proteins: Protein)-[is_involved_in:is_involved_in]->(pathways:Pathway)-[is_associated_with:is_associated_with]->(diseases:Disease)
# RETURN
#   TO_JSON(molecules) as m_json
#   , TO_JSON(interacts_with) as i_w_json
#   , TO_JSON(proteins) as p_json
#   , TO_JSON(is_involved_in) as i_i_json
#   , TO_JSON(pathways) as pway_json
#   , TO_JSON(diseases) as d_json
#   , TO_JSON(is_associated_with) as i_a_w_json

"""The `biological_network` graph is a model of the complex relationships between different biological entities. It's designed to help us understand how a potential drug molecule might affect a disease. Here's a breakdown of its components:

**1. Nodes (The Entities)**

The graph consists of four distinct types of nodes, each representing a key piece of our puzzle:

*   **`Molecule`**: Represents the chemical compounds in our library, including our starting drug ('DrugEffectiveX') and all the candidates.
*   **`Protein`**: Represents the biological targets that molecules can interact with.
*   **`Pathway`**: Represents a series of actions among molecules in a cell that leads to a certain product or a change in a cell. These are the biological highways where proteins operate.
*   **`Disease`**: Represents the medical conditions we are interested in, like 'Glioblastoma'.

**2. Edges (The Relationships)**

The nodes are connected by three types of edges, which define how they relate to one another:

*   **`interacts_with`**: This edge connects a `Molecule` to a `Protein`. It signifies a direct interaction, such as a drug inhibiting a specific protein. The `strength` property on this edge tells us how strong that interaction is.
*   **`is_involved_in`**: This edge connects a `Protein` to a `Pathway`. It shows that a particular protein is a component of a larger biological process or pathway.
*   **`is_associated_with`**: This edge connects a `Pathway` to a `Disease`. It indicates that a biological pathway is known to be linked to a specific disease, for example, as a 'driver' of the disease.

By combining these nodes and edges, the graph allows us to trace a path from a candidate molecule all the way to a disease, evaluating both its potential effectiveness and its potential side effects.

# **Step 3**: Exploratory Analysis - Join Similar Molecules to Find All Connected Pathways

* Before filtering for specific diseases or toxicity, let's see all the biological pathways our candidate molecules are connected to.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT
#   sm.molecule_name,
#   sm.distance,
#   g.interaction_strength,
#   g.protein_name,
#   g.pathway_name
# FROM
#   biotech_demo.similar_molecules AS sm
# JOIN
#   GRAPH_TABLE(biotech_demo.biological_network
#     MATCH (m:Molecule) -[i:interacts_with]->(p:Protein)-[:is_involved_in]->(pathway:Pathway)
#     COLUMNS (
#       m.molecule_id,
#       i.strength AS interaction_strength,
#       p.protein_name,
#       pathway.pathway_name
#     )
#   ) AS g
# ON sm.molecule_id = g.molecule_id
# ORDER BY sm.distance, g.interaction_strength DESC;

"""# **Step 4**: Graph Analysis - Find Candidates Relevant to 'Glioblastoma'

* Find which of our similar molecules are connected to the target disease.
* This is a 3-hop traversal: (Molecule) -> (Protein) -> (Pathway) -> (Disease)
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# CREATE OR REPLACE TABLE biotech_demo.on_target_candidates AS
# SELECT
#   g.molecule_id,
#   g.molecule_name,
#   g.interaction_strength,
#   g.protein_name,
#   g.pathway_name,
#   g.disease_name
# FROM GRAPH_TABLE(biotech_demo.biological_network
#   MATCH (m:Molecule) -[i:interacts_with]-> (p:Protein) -[:is_involved_in]-> (pathway:Pathway) -[:is_associated_with]-> (d:Disease)
#   WHERE d.disease_name = 'Glioblastoma'
#   COLUMNS (
#     m.molecule_id AS molecule_id,
#     m.molecule_name AS molecule_name,
#     i.strength AS interaction_strength,
#     p.protein_name AS protein_name,
#     pathway.pathway_name AS pathway_name,
#     d.disease_name as disease_name
#   )
# ) AS g
# WHERE g.molecule_id IN (SELECT molecule_id FROM biotech_demo.similar_molecules);
# 
# -- Review the on-target results. Candidate-08 looks very promising.
# SELECT * FROM biotech_demo.on_target_candidates ORDER BY interaction_strength DESC;

"""#**Step 5**: Graph Analysis - Identify Candidates with Off-Target (Toxic) Effects

* Now we screen for candidates that interact with the known toxicity pathway, performing a crucial safety check on the promosing molecules we found we found with Vertex search.
* This is a 2-hop traversal: (Molecule) -> (Protein) -> (Pathway)
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# CREATE OR REPLACE TABLE biotech_demo.off_target_candidates AS
# SELECT
#   g.molecule_id,
#   g.molecule_name,
#   g.pathway_name AS toxic_pathway
# FROM GRAPH_TABLE(biotech_demo.biological_network
#   MATCH (m:Molecule)-[i:interacts_with]->(p:Protein)-[:is_involved_in]->(pathway:Pathway)
#   WHERE pathway.pathway_name = 'Cardiotoxicity Pathway'
#   COLUMNS (
#     m.molecule_id, m.molecule_name, pathway.pathway_name
#   )
# ) AS g
# WHERE g.molecule_id IN (SELECT molecule_id FROM biotech_demo.similar_molecules);
# 
# -- Review the off-target results. This flags Candidate-02 as a potential risk.
# SELECT * FROM biotech_demo.off_target_candidates;

"""`Candidate-02` might cause potenital risk  `cardiotoxicity pathway`.

The cross referencing with similar molecules ensures it only checks the molecules from our `imilar_molecules` list. Tgere is no need to check the entire library for toxicity, just the ones that are promising candidates.

The results creates a table named `off_target_candidates`. Any molecules listed in the table is flagged as a potential risk, so despite `candidate-02` being the top structural match from the vector search, its connected to the cardiotoxicit pathway, making it a poor chocie for further development.

# **Step 6**: Final Synthesis - Rank Candidates and Select the Winner

- Join all our findings to create a final ranking.
- We want high similarity (low distance), a strong on-target effect, and NO off-target effects.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery
# SELECT
#   sm.molecule_name,
#   sm.distance,
#   ot.interaction_strength,
#   ot.pathway_name AS on_target_pathway,
#   off.toxic_pathway,
#   -- SCORING LOGIC
#   CASE
#     WHEN off.toxic_pathway IS NOT NULL THEN 'REJECT - TOXICITY RISK'
#     WHEN ot.molecule_name IS NULL THEN 'REJECT - NO DISEASE LINK'
#     ELSE 'PROMISING CANDIDATE'
#   END AS assessment
# FROM biotech_demo.similar_molecules sm
# LEFT JOIN biotech_demo.on_target_candidates ot ON sm.molecule_id = ot.molecule_id
# LEFT JOIN biotech_demo.off_target_candidates off ON sm.molecule_id = off.molecule_id
# ORDER BY assessment, distance ASC, interaction_strength DESC;
#

"""# **FINAL CONCLUSION**:
* The final result clearly shows that 'Candidate-08' is the superior choice.
* Even though `Candidate-02` had the highest structural similarity (lowest distance), the graph analysis revealed its critical flaw of interacting with a toxicity pathway.
* `Candidate-08`, while slightly less similar, has a strong, clean interaction with a key Glioblastoma pathway, making it the top lead for further research.
*This demonstrates how graph analytics provides essential context that vector search alone cannot.

# **Next step: Drug Discovery Pipeline**

use stored procedures and scheduled queries to automate the pipeline.

1. `target molecule` and `target disease` becomes input parameters, so the schedule queries can accept different parrun the same analaysis for different drugs and diseases
2. create stored procedures that turns the multistep SQL logic into single callable routin, use `CREATE PROCEDURE` statement

```
CREATE OR REPLACE PROCEDURE biotech_demo.run_drug_discovery_pipeline(
  target_molecule_id STRING,
  target_disease_name STRING
)
BEGIN
  -- Step 2: Vector Search for Structural Similarity
  CREATE OR REPLACE TEMP TABLE similar_molecules AS
  WITH target AS (SELECT embedding FROM biotech_demo.molecules WHERE molecule_id = target_molecule_id)
  SELECT m.molecule_id, m.molecule_name, ML.DISTANCE(m.embedding, (SELECT embedding FROM target), 'COSINE') AS distance
  FROM biotech_demo.molecules m WHERE m.molecule_id != target_molecule_id ORDER BY distance ASC LIMIT 10;

  -- Step 4: Graph Analysis - Find Candidates Relevant to the Target Disease
  CREATE OR REPLACE TEMP TABLE on_target_candidates AS
  SELECT
    g.molecule_id, g.molecule_name, g.interaction_strength,
    g.protein_name, g.pathway_name, g.disease_name
  FROM GRAPH_TABLE(biotech_demo.biological_network
    MATCH (m:Molecule) -[i:interacts_with]-> (p:Protein) -[:is_involved_in]-> (path:Pathway) -[:is_associated_with]-> (d:Disease)
    WHERE d.disease_name = target_disease_name
    COLUMNS (
      m.molecule_id AS molecule_id, m.molecule_name AS molecule_name, i.strength AS interaction_strength,
      p.protein_name AS protein_name, path.pathway_name AS pathway_name, d.disease_name as disease_name
    )
  ) AS g
  WHERE g.molecule_id IN (SELECT molecule_id FROM similar_molecules);

  -- Step 5: Graph Analysis - Identify Candidates with Off-Target (Toxic) Effects
  CREATE OR REPLACE TEMP TABLE off_target_candidates AS
  SELECT
    g.molecule_id, g.molecule_name, g.pathway_name AS toxic_pathway
  FROM GRAPH_TABLE(biotech_demo.biological_network
    MATCH (m:Molecule) -[i:interacts_with]-> (p:Protein) -[:is_involved_in]-> (path:Pathway)
    WHERE path.pathway_name = 'Cardiotoxicity Pathway'
    COLUMNS (m.molecule_id, m.molecule_name, path.pathway_name)
  ) AS g
  WHERE g.molecule_id IN (SELECT molecule_id FROM similar_molecules);

  -- Step 6: Final Synthesis - Create a permanent results table
  -- Note: The table name includes the target molecule and a timestamp for uniqueness.
  EXECUTE IMMEDIATE format('''
  CREATE OR REPLACE TABLE biotech_demo.pipeline_results_%s_%t AS
  SELECT
    sm.molecule_name, sm.distance, ot.interaction_strength,
    ot.pathway_name AS on_target_pathway, off.toxic_pathway,
    CASE
      WHEN off.toxic_pathway IS NOT NULL THEN 'REJECT - TOXICITY RISK'
      WHEN ot.molecule_name IS NULL THEN 'REJECT - NO DISEASE LINK'
      ELSE 'PROMISING CANDIDATE'
    END AS assessment,
    '%s' as target_molecule,
    '%s' as target_disease
  FROM similar_molecules sm
  LEFT JOIN on_target_candidates ot ON sm.molecule_id = ot.molecule_id
  LEFT JOIN off_target_candidates off ON sm.molecule_id = off.molecule_id
  ORDER BY assessment, distance ASC, interaction_strength DESC;
  ''', REPLACE(target_molecule_id, '-', '_'), CURRENT_TIMESTAMP(), target_molecule_id, target_disease_name);

END;
```

3. schedule pipeline
"""

